static_resources:
  clusters:
    - connect_timeout: "0.25s"
      health_checks:
        - healthy_threshold: 2
          http_health_check:
            codec_client_type: "HTTP2"
            path: "/health"
          interval: "5s"
          timeout: "3s"
          unhealthy_threshold: 3
      lb_policy: "ROUND_ROBIN"
      load_assignment:
        cluster_name: "authz_service"
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "authz"
                      port_value: 3000
      name: "authz_service"
      http2_protocol_options: {}
      type: "STRICT_DNS"
    - connect_timeout: "0.25s"
      health_checks:
        - healthy_threshold: 2
          http_health_check:
            codec_client_type: "HTTP2"
            path: "/health"
          interval: "5s"
          timeout: "3s"
          unhealthy_threshold: 3
      lb_policy: "ROUND_ROBIN"
      load_assignment:
        cluster_name: "api_service"
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "api"
                      port_value: 3000
      name: "api_service"
      http2_protocol_options: {}
      type: "STRICT_DNS"
  listeners:
    - address:
        socket_address:
          address: "0.0.0.0"
          port_value: 8080
      filter_chains:
        - filters:
            - name: "envoy.filters.network.http_connection_manager"
              typed_config:
                "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
                access_log:
                  - name: "envoy.access_loggers.file"
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      log_format:
                        json_format:
                          authority: "%REQ(:AUTHORITY)%"
                          bytes_received: "%BYTES_RECEIVED%"
                          bytes_sent: "%BYTES_SENT%"
                          duration: "%DURATION%"
                          envoy_original_path: "%REQ(X-ENVOY-ORIGINAL-PATH)%"
                          method: "%REQ(:METHOD)%"
                          path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          protocol: "%PROTOCOL%"
                          request_id: "%REQ(X-REQUEST-ID)%"
                          response_code: "%RESPONSE_CODE%"
                          response_flags: "%RESPONSE_FLAGS%"
                          start_time: "%START_TIME%"
                          upstream_cluster: "%UPSTREAM_CLUSTER%"
                          upstream_host: "%UPSTREAM_HOST%"
                          upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          user_agent: "%REQ(USER-AGENT)%"
                          x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      path: "/dev/stdout"
                http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz"
                      http_service:
                        server_uri:
                          uri: http://authz:3000
                          cluster: "authz_service"
                          timeout: "5s"
                        path_prefix: "/validate"
                        authorization_request:
                          allowed_headers:
                            patterns:
                              - exact: "authorization"
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: "authorization"
                  - name: "envoy.filters.http.router"
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                route_config:
                  name: "local_route"
                  virtual_hosts:
                    - domains:
                        - "pizzas.localhost"
                      name: "api_service"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: "api_service"
                stat_prefix: "ingress_http"
